rnorm(10, 100, 25)
?rpois
rpois(5)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
View(my_pois)
class(my_pois)
?replicate
my_pois
sapply(my_pois, colMeans
)
sapply(my_pois, colMeans)
sapply(my_pois, 2, colMeans)
apply(my_pois, 2, colMeans)
apply(my_pois, 2, sum)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Data("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time, t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
difftime
?difftime
data(cars)
?cars
head(cars)
table(airquality, %in% c("28"))
table(airquality$Ozone, %in% c("28"))
table(airquality$Ozone %in% c("28"))
(airquality$Ozone %in% c("28"))
is.equal <- function(vector, value) {
if (is.na(value))
is.na(vector)
else if (is.nan(value))
is.nan(vector)
else if (is.infinite(value))
is.infinite(vector)
else
sapply(vector, function(vec_element, value) {vec_element == value}, value)
}
is.equal(airquality$Ozone, 28)
sapply
is.equal <- function(vector, value) {
if (is.na(value))
is.na(vector)
else if (is.nan(value))
is.nan(vector)
else if (is.infinite(value))
is.infinite(vector)
else
sapply(vector, function(vec_element, value) {vec_element == value}, value, na.rm = T)
}
is.equal(airquality$Ozone, 28)
is.equal <- function(vector, value) {
if (is.na(value))
is.na(vector)
else if (is.nan(value))
is.nan(vector)
else if (is.infinite(value))
is.infinite(vector)
else
#        sapply(vector, function(vec_element, value) {vec_element == value}, value)
sapply(vector, function(vec_element, value) {if (is.na(vec_element)) { FALSE } else {vec_element == value}}, value)
}
is.equal(airquality$Ozone, 28)
airquality %in% 28
airquality %in% c("28")
airquality$Ozone %in% c("28")
airquality$Ozone %in% 28
is.equal <- function(vector, value) {
if (is.na(value))
is.na(vector)
else if (is.nan(value))
is.nan(vector)
else if (is.infinite(value))
is.infinite(vector)
else
vector %in% value
#        sapply(vector, function(vec_element, value) {if (is.na(vec_element)) { FALSE } else {vec_element == value}}, value)
}
is.equal(airquality$Ozone, 28)
min(airquality$Ozone)
min(airquality$Ozone, na.rm=T)
airquality %in% min(airquality$Ozone, na.rm=T)
airquality$Ozone %in% min(airquality$Ozone, na.rm=T)
head(airquality, 60)
airquality$Ozone %in% c(30, 40)
airquality[airquality$Ozone %in% c(30, 40)]
airquality$Ozone %in% c(30, 40)
airquality$Ozone[airquality$Ozone %in% c(30, 40)]
airquality[airquality$Ozone %in% c(30, 40)]
nrows(airquality$Ozone)
nrow(airquality$Ozone)
nrow(airquality$Ozone)
nrow(airquality)
nrow(airquality$Ozone %in% c(30, 40))
ncol(airquality$Ozone %in% c(30, 40))
length(airquality$Ozone %in% c(30, 40))
airquality[airquality$Ozone %in% c(30, 40),]
airquality[airquality$Ozone %in% 40:500,]
max(airquality$Ozone)
max(airquality$Ozone, ra.rm=T)
max(airquality$Ozone, ra.rm=T)
max(airquality$Ozone, ra.rm=F)
summary(airquality$Ozone)
max(airquality$Ozone, na.rm = T)
table(airquality$Ozone %in% 100:max(airquality$Ozone, na.rm = T))
data("UCBAdmissions")
df <- as.data.frame(UCBAdmissions)
nrow(df)
View(df)
xtabs(mpg ~ cyl, data = mtcars)
boxplot(mpg ~ cyl, data = mtcars)     # Box plot
xtabs(mpg ~ speed, data = mtcars)
xtabs(mpg ~ speed, data = cars)
cars
xtabs(dist ~ speed, data = cars)
summary(airquality)
xtabs(Temp, Ozone + Solar.R + Wind, data = airquality)
xtabs(Temp, Ozone + Solar.R + Wind, data = airquality)
names(airquality)
xtabs(Temp, Ozone, data = airquality)
xtabs(Solor.R, Ozone, data = airquality)
?note
?Note
is.null()
is.null(NULL)
NULL <- 1
NA <- 1
NA = 1
T <- 1
rm (T)
n <- NULL
is.null(n)
n <- data.frame(NULL)
n
is.null(n)
NULL
print("====\n====")
cat("====\n====")
n <- c("ABU", "Hassan", "Lin.Dan")
tolower(n)
toupper(n)
n[3]
str_to_upper(n)
?str_to_upper
library(stringr)
?str_to_upper
str_to_upper(n)
strsplit(n[3], "\\.")
?stringr
str_to_lower(n)
str_to_upper(n)
str_to_title(n)
totitle()
str_length(n)
strtrim(c("abcdef", "abcdef", "abcdef"), c(1,5,10))
strtoi(c("0xff", "077", "123"))
strtoi(c("ffff", "FFFF"), 16L)
strtoi(c("177", "377"), 8L)
strtoi("64", 2L)
strtoi("64", 8L)
strtoi("1111", 2L)
strtoi("11111", 2L)
strtoi("1111111", 2L)
fruit <- c("apple", "banana", "pear", "pineapple")
str_count(fruit, "a")
str_count(fruit, "p")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_dup(fruit, 2)
str_dup(fruit, 1:3)
str_dup(fruit, 1:4)
str_extract(fruit, "^a")
str_extract(fruit, "a[a-z]+")
str_extract_all(fruit, "a[a-z]+")
str_extract_all(fruit, "a[a-z]+", T)
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "[a-z]+")
act_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "[a-z]+")
fruit <- c("apple", "banana", "pear", "pineapple", "alovera alpine")
str_count(fruit, "a")      # [1] 1 3 1 1
str_detect(fruit, "a")     # [1] TRUE TRUE TRUE TRUE
str_detect(fruit, "^a")    # [1]  TRUE FALSE FALSE FALSE
str_detect(fruit, "a$")    # [1] FALSE  TRUE FALSE FALSE
str_dup(fruit, 2)
str_dup(fruit, 1:4)
str_dup(fruit, 1:5)
tr_extract(fruit, "[a-z]+")              # [1] "apple" "anana" "ar"    "apple"
str_extract(fruit, "[a-z]+")              # [1] "apple" "anana" "ar"    "apple"
str_extract_all(fruit, "[a-z]+")
str_extract_all(fruit, "[a-z]+", TRUE)
str_c(letters, collapse = ", ")
str_c(letters, " is for", "...")
str_c("Letter: ", letters)
str_c(letters[1:3], collapse = ", ")
str_c(letters[1:3], " is for ", letters[5:7])
str_subset(fruit, "a")
str_subset(fruit, "^a")
str_locate(fruit, "^a")
str_locate_all(fruit, "^a")
str_locate_all(fruit, "a")
str_locate_all(fruit, "app")
str_locate(fruit, "a")
str_locate_all(fruit, "a")
hw <- "Hadley Wickham"
str_sub(hw, 1, 6)
str_sub(hw, 1, 6) <- "Henrry"
hw
str_sub(hw, end = 6)
str_sub(hw, -7)
x <- "BBCDEF"
str_sub(x, 1, 1) <- "A"; x
sub("a beautiful", "X", d) # [1] "the world is an ugly place"
sub("_", "", "this_is_a_test")       # [1] "the world is an ugly place"
gsub("_", "", "this_is_a_test")       # [1] "thisis_a_test"
?grep
color <- c("red", "blue1", "blue2", "red2")
grep("red", color)                      # [1] 1 4
grep("red", color, value = TRUE)                      # [1] 1 4
color[grep("red", color)]
str_trim("    \taaaa    \t\n")   # trim off white space
str_trim("    \taaaa    \t\n", side = "left")   # trim off white space
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187  ", "482 952 3315",
"239 923 8115 and 842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
str_match(strings, phone)
str_order(fruit)
str_sort(fruit)
cv <- sprintf("%s, the %s is a beautiful place %d!", a, b, 100) # cv <- "hello, the world is a beautiful place 100!"
str_replace(cv, "a beautiful", "an ugly")
a <- "hello"
b <- "world"
cv <- sprintf("%s, the %s is a beautiful place %d!", a, b, 100)
str_replace(cv, "a beautiful", "an ugly")
cv
today <- Sys.Date()
format(today, "%a %b %d")
today
julian(today)
install.packages(libridate)
library(lubridate)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
dmy("21-01-1970")
ymd_hms("20150721 21:21:21", locale = "GMT")
ymd_hms("20150721 21:21:21", tz = "Malaysia")
?ymd
ymd_hms("20150721 21:21:21", tz = "UTC")
?Sys.timezone
?wday
today <- sys.Date()
today <- system.Date()
today <- Sys.Date()
wday(today)
wday(today + 1)
today +1
wday(today + 6)
d1 <- ymd_hms("20150721 21:21:21", tz = "UTC")
wday(d1, label = TRUE)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
?select
library(dplyr)
?select
chicago <- readRDS("chicago.rds")
nyc <- now("America/New_York")
library(lubridate)
nyc <- now("America/New_York")
depart <- nyc + days(2) + hours(4) + minutes(30)
source('~/Desktop/Johns Hopkins Data Science Course/Sample projects/starbucks.R')
install.packages("twitteR")
install.packages("sentiment")
data_raw <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
setwd("~/GitHub/RepData_PeerAssessment1")
data_raw <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
data_noNA <- na.omit(data_raw)
data_grouped <- group_by(data_noNA, interval)
data_summarized <- summarise(data_grouped, steps = mean(steps))
average_steps_by_interval <- data_summarized                     # Required for later part of the calculation to impute NAs
data_grouped <- group_by(data_noNA, interval)
library(ggplot2)
library(dplyr)
data_grouped <- group_by(data_noNA, interval)
data_summarized <- summarise(data_grouped, steps = mean(steps))
average_steps_by_interval <- data_summarized                     # Required for later part of the calculation to impute NAs
ggplot(data_summarized, aes(interval, steps)) + geom_line() + labs(title = "Average number of steps across all days for each 5-minute interval", x = "5-minute interval", y = "Average number of steps across all days")
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
bad <- is.na(data_raw)
bad <- is.na(data_raw$steps)
head(bad)
count(bad)
count
sum(bad)
View(average_steps_by_interval)
View(average_steps_by_interval)
View(data_raw)
View(data_imputed)
a <- data_raw[bad]
a <- data_raw[bad, ]
b <- data_imputed[bad, ]
View(a)
View(b)
rm(a)
rm(b)
floor(mean(data_raw))
floor(mean(data_noNA))
floor(mean(data_noNA$steps))
floor(mean(data_noNA$steps))
floor(mean(data_raw$steps))
floor(mean(data_raw$steps, no.na = TRUE))
floor(mean(data_raw$steps, no.rm = TRUE))
data_grouped <- group_by(data_noNA, date)
data_summarized <- summarise(data_grouped, steps = sum(steps))
ggplot(data_summarized, aes(x=steps)) + geom_histogram() + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps Taken", y = "Frequency of occurance")
average <- floor(mean(data_summarized$steps))
med <- floor(median(data_summarized$steps))
data_imputed <- data_raw
data_imputed$steps <- impute(data_raw$steps, fun=mean)
data_grouped <- group_by(data_imputed, date)
data_summarized <- summarise(data_grouped, steps = sum(steps))
summary(data_summarized$steps)
mean(data_summarized$steps)
data_raw <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
data_noNA <- na.omit(data_raw)
summary(daya_naNA$steps)
summary(data_naNA$steps)
summary(data_noNA$steps)
data_grouped <- group_by(data_noNA, date)
data_summarized <- summarise(data_grouped, steps = sum(steps))
summary(data_summarized$steps)
mean(data_summarized$steps)
median(data_summarized$steps)
data_imputed <- data_raw
data_imputed$steps <- impute(data_raw$steps, fun=mean)
data_grouped <- group_by(data_imputed, date)
data_summarized <- summarise(data_grouped, steps = sum(steps))
summary(data_imputed$steps)
View(data_imputed)
library(Hmisc)
data_imputed <- data_raw
data_imputed$steps <- impute(data_raw$steps, fun=mean)
data_grouped <- group_by(data_imputed, date)
data_summarized <- summarise(data_grouped, steps = sum(steps))
summary(data_imputed$steps)
summary(data_summarized$steps)
mean(data_summarized$steps)
median(data_summarized$steps)
data_raw <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
data_noNA <- na.omit(data_raw)
data_grouped <- group_by(data_noNA, date)
data_summarized <- summarise(data_grouped, steps = sum(steps))
average <- floor(mean(data_summarized$steps))
med <- floor(median(data_summarized$steps))
data_raw <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
data_noNA <- na.omit(data_raw)
data_imputed2 <- transform(data_raw, steps = ifelse(is.na(data_raw$steps), average_steps_by_interval$steps[match(data_raw$interval, average_steps_by_interval$interval)], data_raw$steps))
View(data_imputed2)
View(data_imputed)
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
```
View(data_imputed)
today <- Sys.Date()                      # Sys.time() returns POSIXct format
weekdays(today)                         # [1] "Friday"
data_raw <- read.csv("activity.csv", colClasses = c("integer", "Date", "integer"))
data_noNA <- na.omit(data_raw)
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
```
View(data_imputed)
data_grouped <- group_by(data_noNA, interval)
data_summarized <- summarise(data_grouped, steps = mean(steps))
average_steps_by_interval <- data_summarized                     # Required for later part of the calculation to impute NAs
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
```
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
```
View(data_imputed)
data_imputed$date[1]
weekday(data_imputed$date[1])
weekdays(data_imputed$date[1])
as.POSIXlt(data_imputed$date)$wday %in% c(0,6)
data_imputed$date[1]
data_imputed$date[1]$wday
as.POSIXlt(data_imputed$date[1])
as.POSIXlt(data_imputed$date[1])$wday
data_imputed$dateType <- ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
data_imputed$dateType <- ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
data_imputed$dateType <- ifelse(as.POSIXlt(data_imputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
View(data_imputed)
summary(data_imputed$dateType)
data_imputed$dateType
rm(data_imputed)
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
View(data_imputed)
weekdays(data_imputed$date[1])
data_imputed$day <- weekdays(data_imputed$date)
View(data_imputed)
Sat_n_Sun <- c('Saturday', 'Sunday')
data_imputed$day <- ifelse(data_imputed$day %in% Sat_n_Sun, 'weekend', 'weekday')
View(data_imputed)
rm(data_imputed)
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
data_imputed$day <- weekdays(data_imputed$date)
Sat_n_Sun <- c('Saturday', 'Sunday')
data_imputed$day2 <- ifelse(data_imputed$day %in% Sat_n_Sun, 'weekend', 'weekday')
View(data_imputed)
rm(data_imputed)
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
data_imputed$day <- weekdays(data_imputed$date)
data_imputed$day2 <- ifelse(as.POSIXlt(data_imputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
View(data_imputed)
rm(data_imputed)
data_imputed <- data_raw
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
data_imputed$steps[i] <- average_steps_by_interval$steps[which(average_steps_by_interval$interval == data_imputed$interval[i])]
}
}
data_imputed$day <- weekdays(data_imputed$date)
Sat_n_Sun <- c('Saturday', 'Sunday')
data_imputed$day <- ifelse(data_imputed$day %in% Sat_n_Sun, 'weekend', 'weekday')
View(data_imputed)
class(data_imputed$day)
data_imputed$day <- as.factor(data_imputed$day)
View(data_imputed)
class(data_imputed$day)
level(data_imputed$day)
levels(data_imputed$day)
summary(data_imputed$day)
View(data_imputed)
data_for_plot <- aggregate(steps ~ interval + day, data_imputed, mean)
library(lattice)
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$doy, layout=c(1,2), type="l", main="Average number of steps across all days for each 5-minute interval", xlab="5-minute interval", ylab="Average number of steps across all days")
help("xyplot")
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$doy, type="l", main="Average number of steps across all days for each 5-minute interval", xlab="5-minute interval", ylab="Average number of steps across all days")
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$doy, layout=c(1,2), type="l")
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$day, layout=c(1,2), type="l")
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$day, layout=c(1,2), type="l", , main="Average number of steps across all days for each 5-minute interval", xlab="5-minute interval", ylab="Average number of steps across all days")
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$day, layout=c(1,2), type="l", , main="Average number of steps across all days for each 5-minute interval", xlab="Interval", ylab="Number of steps")
xyplot(data_for_plot$steps ~ data_for_plot$interval | data_for_plot$day, layout=c(1,2), type="l", main="Average number of steps across all days for each 5-minute interval", xlab="Interval", ylab="Number of steps")
help("ggplot")
